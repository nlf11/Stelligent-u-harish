AWSTemplateFormatVersion: 2010-09-09
Description: Creation of Ec2 Instance
Parameters:
  VpcCIDR:
    Description: Enter the CIDR block value
    Type: String
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: user
          Value: harish.clabs
        - Key: stelligent-u-lesson
          Value: 4
        - Key: stelligent-u-lab
          Value: 4.1.1
  VpcSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: us-east-2a
  VpcSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: us-east-2b
  myInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: user
          Value: harish.clabs
        - Key: stelligent-u-lesson
          Value: 4
        - Key: stelligent-u-lab
          Value: 4.1.2
  vpcInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref myInternetGateway
  myRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
  vpcInternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - myInternetGateway
      - vpcInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  MyAutoscalingGroup22:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref VpcSubnet1
        - !Ref VpcSubnet2
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: '30'
      LaunchConfigurationName: !Ref MyAutoscalingLaunchConfig
  MyAutoscalingLaunchCconfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0b614a5d911900a9b
      InstanceType: t2.micro
      KeyName: Mywinkey
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
          DeviceName: /dev/sda2
      SecurityGroups:
        - !Ref Mysecuritygroup
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource MyAutoscalingLaunchCconfig \
              --configsets All \
              --region ${AWS::Region}
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource MyAutoscalingLaunchCconfig \
              --region ${AWS::Region} 
      Metadata:
        'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureStelligentProject
        ConfigureStelligentProject:
          packages:
            yum:
              nginx: []
          files:
            /usr/share/nginx/html/index.html:
              content: '<p>Automation for the People</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
  Mysecuritygroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: vpc security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  EC2TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup' 
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: !Ref Vpc
      TargetType: instance
      Port: 80
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref VpcSubnet1
        - !Ref VpcSubnet2
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
