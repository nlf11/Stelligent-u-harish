AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EngineerName:
    Type: 'AWS::SSM::Parameter::Name'
  EngineerTeam:
    Type: 'AWS::SSM::Parameter::Value<String>'
  EngineerTimezone:
    Type: 'AWS::SSM::Parameter::Value<String>'
  EngineerState:
    Type: 'AWS::SSM::Parameter::Value<String>'
  EngineerStartDate:
    Type: 'AWS::SSM::Parameter::Value<String>'  
  EngineerLastName:
    Type: String
    Default: '{{resolve:secretsmanager:MySecretName:SecretString:LastName}}'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select KeyPair 
Resources:
  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: 'MYASG'
      VPCZoneIdentifier: 
      - subnet-0103a20e91200bf3e
      - subnet-0b1154f10cb19a51d
      - subnet-07aa7707a80bd57a1
      TargetGroupARNs: 
        - !Ref TargetGroup1
      DesiredCapacity: '2'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: '3'
      MinSize: '1'
  WebServersLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-0b614a5d911900a9b'
      KeyName: !Ref KeyName
      InstanceType: 't2.micro'
      LaunchConfigurationName: 'SimpleWebServerLC'
      SecurityGroups:
        - !Ref Mysecuritygroup
      UserData: 
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe

            yum install -y aws-cfn-bootstrap
            sudo yum update -y
            sudo amazon-linux-extras install nginx1
            sudo systemctl start nginx.service
            sudo systemctl enable nginx.service
            sudo service nginx start
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --configsets All \
              --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --region ${AWS::Region}
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureStelligentProject
        ConfigureStelligentProject:
          packages:
            yum:
              nginx: []
          files:
            /usr/share/nginx/html/index.html:
              content:  '<u1>Info of engineer</u1>
                          <li>${EngineerName}</li>
                          <li>${MyEngineerParameterKey}</li>
                          <li>${EngineerTeam}</li>
                          <li>${EngineerTimezone}</li>
                          <li>${EngineerState}</li> 
                          <li>${EngineerLastName}</li>'              
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true' 
  Mysecuritygroup:
    Type: 'AWS::EC2::SecurityGroup'  
    Properties:
      VpcId: vpc-0c6d295a8e544a676 
      GroupDescription: vpc security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22' 
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckPath: '/'
      Port: 80
      Protocol: HTTP
      VpcId: vpc-0c6d295a8e544a676
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
      - subnet-0103a20e91200bf3e
      - subnet-0b1154f10cb19a51d
      - subnet-07aa7707a80bd57a1
  Listener2:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: 'HTTP'
  
    
